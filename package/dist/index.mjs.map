{"version":3,"sources":["../src/components/ReactGridX/index.tsx","../src/components/Paginations/RGXArrowPagination/index.tsx","../src/components/Icons/FontAwesome/index.tsx","../src/components/Paginations/RGXTablePagination/index.tsx","../src/components/Tooltip/index.tsx"],"sourcesContent":["import React, { JSX, useState } from \"react\";\r\nimport \"../../themes/rgx-theme.css\";\r\nimport RGXArrowPagination from \"../Paginations/RGXArrowPagination\";\r\nimport RGXTablePagination from \"../Paginations/RGXTablePagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solidIcons } from \"../Icons/FontAwesome\";\r\nimport Tooltip from \"../Tooltip\";\r\n\r\n// Define the column properties for the table\r\nexport interface ReactGridXColumnProps {\r\n  name: string; // The column name to display\r\n  key: string; // key which match with data key\r\n  render?: (data: any) => JSX.Element | string; // Optional custom render function for cell data\r\n  sortable?: boolean; // Whether the column is sortable\r\n  onSort?: (data: any[], order: \"asc\" | \"desc\") => any[]; // Custom sorting function\r\n  tooltip?: boolean; // Tooltip property for columns\r\n  tooltipCustomContent?: string | number; //  Tooltip custom content\r\n}\r\n\r\n// Define the main props for the ReactGridX component\r\nexport interface ReactGridXProps {\r\n  columns: ReactGridXColumnProps[]; // Array of column definitions\r\n  data: any[]; // The dataset to display in the table\r\n  theme?: string; // Optional CSS class for table styling\r\n  rowsPerPageOptions?: number[]; // Options for rows per page in pagination\r\n  paginationType?: \"rgx-table-pagination\" | \"rgx-arrow-pagination\"; // Type of pagination to use (e.g., custom or default)\r\n  paginationStyle?: Record<string, React.CSSProperties>; // Styles for pagination components\r\n  tableStyle?: Record<string, React.CSSProperties>; // Styles for table components\r\n  serverSide?: boolean; // Flag to indicate server-side pagination\r\n  onPaginationAndRowSizeChange?: (page: number, rowsPerPage: number) => void; // Callback for pagination and row size changes\r\n  totalRows?: number; // total number of rows in database\r\n  serverSideSorting?: boolean; // Whether sorting is handled on the server-side\r\n  onSorting?: (column: string, order: \"asc\" | \"desc\") => void; // Callback for sorting columns\r\n  onRowClick?: (rowData: any) => void; // Callback when a row is clicked\r\n  expandedComponent?: (row: any) => JSX.Element; // Custom component to render when a row is expanded, passed the row data\r\n}\r\n\r\n// ReactGridX: A flexible, reusable table component with optional server-side pagination\r\nconst ReactGridX: React.FC<ReactGridXProps> = ({\r\n  columns,\r\n  data,\r\n  theme = \"rgx-theme\",\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  paginationType = \"rgx-table-pagination\",\r\n  paginationStyle = {},\r\n  tableStyle = {},\r\n  serverSide = false,\r\n  onPaginationAndRowSizeChange,\r\n  totalRows,\r\n  serverSideSorting,\r\n  onSorting,\r\n  onRowClick,\r\n  expandedComponent,\r\n}) => {\r\n  // State to manage the current page\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n  // data\r\n  const [currentData, setCurrentData] = useState<any[]>(data);\r\n\r\n  // State to track the currently sorted column and order\r\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\r\n\r\n  // State to manage the number of rows per page\r\n  const [rowsPerPage, setRowsPerPage] = useState<number>(rowsPerPageOptions[0]);\r\n\r\n  // State to track expanded row\r\n  const [expandedRow, setExpandedRow] = useState<number | null>(null);\r\n\r\n  /**\r\n   * Handle page change event\r\n   * @param page - The new page number\r\n   */\r\n  const onPageChange = (page: number) => {\r\n    setCurrentPage(page); // Update the current page state\r\n    onPaginationAndRowSizeChange &&\r\n      onPaginationAndRowSizeChange(page, rowsPerPage); // Trigger the callback with updated page and rows\r\n  };\r\n\r\n  /**\r\n   * Handle rows per page change event\r\n   * @param rows - The new number of rows per page\r\n   */\r\n  const onRowsPerPageChange = (rows: number) => {\r\n    setRowsPerPage(rows); // Update the rows per page state\r\n    setCurrentPage(1); // Reset to the first page\r\n    onPaginationAndRowSizeChange && onPaginationAndRowSizeChange(1, rows); // Trigger the callback with the new rows and reset page\r\n  };\r\n\r\n  /**\r\n   * Handle sorting event\r\n   * @param columnName - The column name to sort by\r\n   */\r\n  const onSortingHandler = (key: string) => {\r\n    const newSortOrder =\r\n      sortColumn === key && sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n    setSortColumn(key);\r\n    setSortOrder(newSortOrder);\r\n\r\n    if (serverSideSorting && onSorting) return onSorting(key, newSortOrder);\r\n\r\n    const column = columns.find((col) => col.key === key);\r\n    const sorted = column?.onSort\r\n      ? column.onSort([...data], newSortOrder)\r\n      : [...data].sort((a, b) =>\r\n          !isNaN(a[key]) && !isNaN(b[key])\r\n            ? newSortOrder === \"asc\"\r\n              ? a[key] - b[key]\r\n              : b[key] - a[key]\r\n            : newSortOrder === \"asc\"\r\n            ? String(a[key]).localeCompare(String(b[key]))\r\n            : String(b[key]).localeCompare(String(a[key]))\r\n        );\r\n\r\n    setCurrentData(sorted);\r\n  };\r\n\r\n  // Calculate the total number of pages for client-side pagination and server-side pagination\r\n  const totalPages = serverSide\r\n    ? Math.ceil((totalRows ?? 0) / rowsPerPage) // total number of rows in database\r\n    : Math.ceil(currentData.length / rowsPerPage);\r\n\r\n  // Slice the data for the current page (only for client-side pagination)\r\n  const currentPageData = serverSide\r\n    ? currentData // Use full data for server-side; parent handles slicing\r\n    : currentData.slice(\r\n        (currentPage - 1) * rowsPerPage,\r\n        currentPage * rowsPerPage\r\n      );\r\n\r\n  // Define pagination components based on the pagination type\r\n  const pagination: Record<string, JSX.Element> = {\r\n    \"rgx-table-pagination\": (\r\n      <RGXTablePagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={serverSide ? totalRows ?? 0 : currentData.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n      />\r\n    ),\r\n    \"rgx-arrow-pagination\": (\r\n      <RGXArrowPagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={serverSide ? totalRows ?? 0 : currentData.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n      />\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the table */}\r\n      <table className={theme} style={tableStyle[\"table\"]}>\r\n        <thead>\r\n          <tr style={tableStyle[\"thead-tr\"]}>\r\n            {/* Render table headers based on column definitions */}\r\n            {columns?.map((column, index) => (\r\n              <th\r\n                key={index}\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  cursor: column.sortable ? \"pointer\" : \"default\",\r\n                  ...tableStyle[\"th\"],\r\n                }}\r\n                onClick={() => column.sortable && onSortingHandler(column.key)}\r\n              >\r\n                {column.name}\r\n                {column.sortable && (\r\n                  <FontAwesomeIcon\r\n                    icon={\r\n                      sortColumn === column.key\r\n                        ? sortOrder === \"asc\"\r\n                          ? solidIcons.faSortUp\r\n                          : solidIcons.faSortDown\r\n                        : solidIcons.faSort\r\n                    }\r\n                    style={{ marginLeft: \"8px\" }}\r\n                  />\r\n                )}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody style={tableStyle[\"tbody\"]}>\r\n          {/* Render table rows for the current page */}\r\n          {currentPageData.map((row, rowIndex) => (\r\n            <>\r\n              <tr\r\n                key={row.id || rowIndex} // Use a unique key for each row\r\n                className={`rgx-row ${\r\n                  expandedRow === rowIndex ? \"rgx-expanded\" : \"\"\r\n                }`}\r\n                style={tableStyle[\"row\"]}\r\n                onClick={() => {\r\n                  expandedComponent &&\r\n                    setExpandedRow(expandedRow === rowIndex ? null : rowIndex);\r\n                  onRowClick && onRowClick(row);\r\n                }}\r\n              >\r\n                {columns.map((column, colIndex) => (\r\n                  <td key={colIndex} style={tableStyle[\"td\"]}>\r\n                    {/* Conditional rendering for the arrow icon if expandedComponent is passed */}\r\n                    {expandedComponent && colIndex === 0 && (\r\n                      <span\r\n                        className=\"rgx-expanded-arrow\"\r\n                        style={tableStyle[\"rgx-expanded-arrow\"]}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          setExpandedRow(\r\n                            expandedRow === rowIndex ? null : rowIndex\r\n                          );\r\n                        }}\r\n                      >\r\n                        <FontAwesomeIcon\r\n                          icon={\r\n                            expandedRow === rowIndex\r\n                              ? solidIcons.faChevronDown\r\n                              : solidIcons.faChevronRight\r\n                          }\r\n                          className=\"rgx-arrow-icon\"\r\n                          style={tableStyle[\"rgx-arrow-icon\"]}\r\n                        />\r\n                      </span>\r\n                    )}\r\n                    {/* Render cell data using custom render function if provided */}\r\n                    {column.tooltip ? (\r\n                      <Tooltip\r\n                        content={\r\n                          column.tooltipCustomContent\r\n                            ? column.tooltipCustomContent\r\n                            : row[column.key]\r\n                        }\r\n                      >\r\n                        {column.render\r\n                          ? column.render(row)\r\n                          : row[column.key] ?? \"\"}\r\n                      </Tooltip>\r\n                    ) : column.render ? (\r\n                      column.render(row)\r\n                    ) : (\r\n                      row[column.key] ?? \"\"\r\n                    )}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n              {/* Render expanded row content */}\r\n              {expandedRow === rowIndex && expandedComponent && (\r\n                <tr\r\n                  className=\"rgx-expanded-row\"\r\n                  style={tableStyle[\"rgx-expanded-row\"]}\r\n                >\r\n                  <td\r\n                    colSpan={columns.length}\r\n                    className=\"rgx-expanded-row-td\"\r\n                    style={tableStyle[\"rgx-expanded-row-td\"]}\r\n                  >\r\n                    {/* Call the expanded component and pass the row data */}\r\n                    {expandedComponent(row)}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Render the pagination component */}\r\n      {pagination[paginationType as keyof typeof pagination]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactGridX;\r\n","import React from \"react\";\nimport \"../../../themes/rgx-arrow-pagination.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { solidIcons } from \"../../Icons/FontAwesome\";\n\n// Props interface for RGXArrowPagination component\nexport interface RGXArrowPaginationProps {\n  currentPage: number; // The current active page number\n  totalPages: number; // Total number of pages\n  rowsPerPage: number; // Number of rows displayed per page\n  totalRows: number; // Total number of rows in the dataset\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\n}\n\n// RGXArrowPagination: A reusable pagination component for tables\nconst RGXArrowPagination: React.FC<RGXArrowPaginationProps> = ({\n  currentPage,\n  totalPages,\n  rowsPerPage,\n  totalRows,\n  onPageChange,\n  onRowsPerPageChange,\n  rowsPerPageOptions = [5, 10, 15],\n  style = {},\n}) => {\n  return (\n    <div className=\"rgx-arrow-pagination\" style={style[\"rgx-arrow-pagination\"]}>\n      {/* Display pagination information */}\n      <div\n        className=\"rgx-arrow-pagination-info\"\n        style={style[\"rgx-arrow-pagination-info\"]}\n      >\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\n      </div>\n\n      {/* Rows per page selector and navigation controls */}\n      <div\n        className=\"rgx-arrow-pagination-row-per-page\"\n        style={style[\"rgx-arrow-pagination-row-per-page\"]}\n      >\n        {/* Rows per page dropdown */}\n        <div\n          className=\"rgx-arrow-rows-per-page\"\n          style={style[\"rgx-arrow-rows-per-page\"]}\n        >\n          <label\n            htmlFor=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-label\"\n            style={style[\"rgx-arrow-rows-per-page-label\"]}\n          >\n            Rows per page:\n          </label>\n          <select\n            id=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-select\"\n            style={style[\"rgx-arrow-rows-per-page-select\"]}\n            value={rowsPerPage}\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\n          >\n            {rowsPerPageOptions?.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Pagination controls */}\n        <div\n          className=\"rgx-arrow-pagination-controls\"\n          style={style[\"rgx-arrow-pagination-controls\"]}\n        >\n          {/* Previous First page button */}\n          <button\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleLeft} />\n          </button>\n          {/* Previous page button */}\n          <button\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(currentPage - 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\n          </button>\n          {/* Display pagination information */}\n          <div\n            className=\"rgx-arrow-pagination-page-of\"\n            style={style[\"rgx-arrow-pagination-page-of\"]}\n          >\n            Page {currentPage} of {totalPages}\n          </div>\n          {/* Next page button */}\n          <button\n            disabled={currentPage === totalPages}\n            onClick={() => onPageChange(currentPage + 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\n          </button>\n\n          {/* Next Last page button */}\n          <button\n            disabled={currentPage === totalPages}\n            onClick={() => onPageChange(totalPages)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleRight} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RGXArrowPagination;\n","import { faFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSmile } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faChevronDown\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const solidIcons = {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faChevronDown\n};\n\nexport const brandIcons = {\n  facebook: faFacebook,\n};\n\nexport const regularIcons = {\n  smile: faSmile,\n};\n","import React from \"react\";\r\nimport \"../../../themes/rgx-table-pagination.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solidIcons } from \"../../Icons/FontAwesome\";\r\n\r\n// Props interface for RGXTablePagination component\r\nexport interface RGXTablePaginationProps {\r\n  currentPage: number; // The current active page number\r\n  totalPages: number; // Total number of pages\r\n  rowsPerPage: number; // Number of rows displayed per page\r\n  totalRows: number; // Total number of rows in the dataset\r\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\r\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\r\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\r\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\r\n}\r\n\r\n// RGXTablePagination: A reusable pagination component for tables\r\nconst RGXTablePagination: React.FC<RGXTablePaginationProps> = ({\r\n  currentPage,\r\n  totalPages,\r\n  rowsPerPage,\r\n  totalRows,\r\n  onPageChange,\r\n  onRowsPerPageChange,\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  style = {},\r\n}) => {\r\n  /**\r\n   * Generates an array of page numbers with ellipsis for navigation\r\n   * @returns {Array<number | string>} - Array of page numbers and ellipsis\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers: (number | string)[] = [];\r\n    const maxVisiblePages = 4; // Maximum number of visible pages\r\n\r\n    if (totalPages <= maxVisiblePages) {\r\n      // If total pages are within the limit, show all page numbers\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n    } else {\r\n      // Add the first page and ellipsis if necessary\r\n      if (currentPage > 2) {\r\n        pageNumbers.push(1, \"...\");\r\n      } else {\r\n        pageNumbers.push(1);\r\n      }\r\n\r\n      // Calculate the range of visible pages\r\n      const startPage = Math.max(2, currentPage - 1);\r\n      const endPage = Math.min(totalPages - 1, currentPage + 1);\r\n\r\n      // Add the range of visible pages\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n\r\n      // Add ellipsis and the last page if necessary\r\n      if (currentPage < totalPages - 1) {\r\n        pageNumbers.push(\"...\", totalPages);\r\n      } else {\r\n        pageNumbers.push(totalPages);\r\n      }\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  const pageNumbers = getPageNumbers(); // Generate page numbers\r\n\r\n  return (\r\n    <div className=\"rgx-table-pagination\" style={style[\"rgx-table-pagination\"]}>\r\n      {/* Display pagination information */}\r\n      <div\r\n        className=\"rgx-table-pagination-info\"\r\n        style={style[\"rgx-table-pagination-info\"]}\r\n      >\r\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\r\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\r\n      </div>\r\n\r\n      {/* Rows per page selector and navigation controls */}\r\n      <div\r\n        className=\"rgx-table-pagination-row-per-page\"\r\n        style={style[\"rgx-table-pagination-row-per-page\"]}\r\n      >\r\n        {/* Rows per page dropdown */}\r\n        <div className=\"rgx-rows-per-page\" style={style[\"rgx-rows-per-page\"]}>\r\n          <label\r\n            htmlFor=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-label\"\r\n            style={style[\"rgx-rows-per-page-label\"]}\r\n          >\r\n            Rows per page:\r\n          </label>\r\n          <select\r\n            id=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-select\"\r\n            style={style[\"rgx-rows-per-page-select\"]}\r\n            value={rowsPerPage}\r\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\r\n          >\r\n            {rowsPerPageOptions?.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Pagination controls */}\r\n        <div\r\n          className=\"rgx-table-pagination-controls\"\r\n          style={style[\"rgx-table-pagination-controls\"]}\r\n        >\r\n          {/* Previous page button */}\r\n          <button\r\n            disabled={currentPage === 1}\r\n            onClick={() => onPageChange(currentPage - 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\r\n          </button>\r\n\r\n          {/* Page number buttons */}\r\n          {pageNumbers.map((page, index) =>\r\n            typeof page === \"number\" ? (\r\n              <button\r\n                key={index}\r\n                className={`rgx-table-pagination-button ${\r\n                  currentPage === page ? \"rgx-active\" : \"\"\r\n                }`}\r\n                style={\r\n                  currentPage === page\r\n                    ? {\r\n                        ...style[\"rgx-table-pagination-button\"],\r\n                        ...style[\"rgx-table-pagination-button-active\"],\r\n                      }\r\n                    : style[\"rgx-table-pagination-button\"]\r\n                }\r\n                onClick={() => onPageChange(page)}\r\n              >\r\n                {page}\r\n              </button>\r\n            ) : (\r\n              <button\r\n                key={index}\r\n                disabled\r\n                className=\"rgx-table-pagination-button rgx-table-pagination-ellipsis\"\r\n                style={{\r\n                  ...style[\"rgx-table-pagination-button\"],\r\n                  cursor: \"default\",\r\n                  opacity: 0.6,\r\n                }}\r\n              >\r\n                {page}\r\n              </button>\r\n            )\r\n          )}\r\n\r\n          {/* Next page button */}\r\n          <button\r\n            disabled={currentPage === totalPages}\r\n            onClick={() => onPageChange(currentPage + 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RGXTablePagination;\r\n","import React, { JSX } from \"react\";\nimport \"../../themes/rgx-tooltip.css\"\n\ninterface TooltipProps {\n  content: string | JSX.Element; // The content of the tooltip\n  children: React.ReactNode; // The element that will trigger the tooltip\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => {\n  return (\n    <div className=\"rgx-tooltip-container\">\n      {children}\n      <span className=\"rgx-tooltip-text\">{content}</span>\n    </div>\n  );\n};\n\nexport default Tooltip;\n"],"mappings":"AAAA,OAAqB,YAAAA,MAAgB,QCErC,OAAS,mBAAAC,MAAuB,iCCFhC,OAAS,cAAAC,OAAkB,qCAC3B,OAAS,WAAAC,OAAe,sCACxB,OACE,iBAAAC,EACA,kBAAAC,GACA,qBAAAC,GACA,sBAAAC,GACA,UAAAC,GACA,YAAAC,GACA,cAAAC,GACA,iBAAAC,OACK,oCAEA,IAAMC,EAAa,CACxB,cAAAR,EACA,eAAAC,GACA,kBAAAC,GACA,mBAAAC,GACA,OAAAC,GACA,SAAAC,GACA,WAAAC,GACA,cAAAC,EACF,EDSM,OAkBI,OAAAE,EAlBJ,QAAAC,MAAA,oBAbN,IAAMC,GAAwD,CAAC,CAC7D,YAAAC,EACA,WAAAC,EACA,YAAAC,EACA,UAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,mBAAAC,EAAqB,CAAC,EAAG,GAAI,EAAE,EAC/B,MAAAC,EAAQ,CAAC,CACX,IAEIT,EAAC,OAAI,UAAU,uBAAuB,MAAOS,EAAM,sBAAsB,EAEvE,UAAAT,EAAC,OACC,UAAU,4BACV,MAAOS,EAAM,2BAA2B,EACzC,sBACWP,EAAc,GAAKE,EAAc,EAAE,MAAI,IAChD,KAAK,IAAIF,EAAcE,EAAaC,CAAS,EAAE,OAAKA,GACvD,EAGAL,EAAC,OACC,UAAU,oCACV,MAAOS,EAAM,mCAAmC,EAGhD,UAAAT,EAAC,OACC,UAAU,0BACV,MAAOS,EAAM,yBAAyB,EAEtC,UAAAV,EAAC,SACC,QAAQ,cACR,UAAU,gCACV,MAAOU,EAAM,+BAA+B,EAC7C,0BAED,EACAV,EAAC,UACC,GAAG,cACH,UAAU,iCACV,MAAOU,EAAM,gCAAgC,EAC7C,MAAOL,EACP,SAAWM,GAAMH,EAAoB,OAAOG,EAAE,OAAO,KAAK,CAAC,EAE1D,SAAAF,GAAoB,IAAKG,GACxBZ,EAAC,UAAoB,MAAOY,EACzB,SAAAA,GADUA,CAEb,CACD,EACH,GACF,EAGAX,EAAC,OACC,UAAU,gCACV,MAAOS,EAAM,+BAA+B,EAG5C,UAAAV,EAAC,UACC,SAAUG,IAAgB,EAC1B,QAAS,IAAMI,EAAa,CAAC,EAC7B,UAAU,8BACV,MAAOG,EAAM,6BAA6B,EAE1C,SAAAV,EAACa,EAAA,CAAgB,KAAMC,EAAW,kBAAmB,EACvD,EAEAd,EAAC,UACC,SAAUG,IAAgB,EAC1B,QAAS,IAAMI,EAAaJ,EAAc,CAAC,EAC3C,UAAU,8BACV,MAAOO,EAAM,6BAA6B,EAE1C,SAAAV,EAACa,EAAA,CAAgB,KAAMC,EAAW,cAAe,EACnD,EAEAb,EAAC,OACC,UAAU,+BACV,MAAOS,EAAM,8BAA8B,EAC5C,kBACOP,EAAY,OAAKC,GACzB,EAEAJ,EAAC,UACC,SAAUG,IAAgBC,EAC1B,QAAS,IAAMG,EAAaJ,EAAc,CAAC,EAC3C,UAAU,8BACV,MAAOO,EAAM,6BAA6B,EAE1C,SAAAV,EAACa,EAAA,CAAgB,KAAMC,EAAW,eAAgB,EACpD,EAGAd,EAAC,UACC,SAAUG,IAAgBC,EAC1B,QAAS,IAAMG,EAAaH,CAAU,EACtC,UAAU,8BACV,MAAOM,EAAM,6BAA6B,EAE1C,SAAAV,EAACa,EAAA,CAAgB,KAAMC,EAAW,mBAAoB,EACxD,GACF,GACF,GACF,EAIGC,EAAQb,GE5Hf,OAAS,mBAAAc,MAAuB,iCAwE1B,OAeI,OAAAC,EAfJ,QAAAC,MAAA,oBAxDN,IAAMC,GAAwD,CAAC,CAC7D,YAAAC,EACA,WAAAC,EACA,YAAAC,EACA,UAAAC,EACA,aAAAC,EACA,oBAAAC,EACA,mBAAAC,EAAqB,CAAC,EAAG,GAAI,EAAE,EAC/B,MAAAC,EAAQ,CAAC,CACX,IAAM,CA0CJ,IAAMC,GArCiB,IAAM,CAC3B,IAAMA,EAAmC,CAAC,EAG1C,GAAIP,GAAc,EAEhB,QAASQ,EAAI,EAAGA,GAAKR,EAAYQ,IAC/BD,EAAY,KAAKC,CAAC,MAEf,CAEDT,EAAc,EAChBQ,EAAY,KAAK,EAAG,KAAK,EAEzBA,EAAY,KAAK,CAAC,EAIpB,IAAME,EAAY,KAAK,IAAI,EAAGV,EAAc,CAAC,EACvCW,EAAU,KAAK,IAAIV,EAAa,EAAGD,EAAc,CAAC,EAGxD,QAASS,EAAIC,EAAWD,GAAKE,EAASF,IACpCD,EAAY,KAAKC,CAAC,EAIhBT,EAAcC,EAAa,EAC7BO,EAAY,KAAK,MAAOP,CAAU,EAElCO,EAAY,KAAKP,CAAU,CAE/B,CAEA,OAAOO,CACT,GAEmC,EAEnC,OACEV,EAAC,OAAI,UAAU,uBAAuB,MAAOS,EAAM,sBAAsB,EAEvE,UAAAT,EAAC,OACC,UAAU,4BACV,MAAOS,EAAM,2BAA2B,EACzC,sBACWP,EAAc,GAAKE,EAAc,EAAE,MAAI,IAChD,KAAK,IAAIF,EAAcE,EAAaC,CAAS,EAAE,OAAKA,GACvD,EAGAL,EAAC,OACC,UAAU,oCACV,MAAOS,EAAM,mCAAmC,EAGhD,UAAAT,EAAC,OAAI,UAAU,oBAAoB,MAAOS,EAAM,mBAAmB,EACjE,UAAAV,EAAC,SACC,QAAQ,cACR,UAAU,0BACV,MAAOU,EAAM,yBAAyB,EACvC,0BAED,EACAV,EAAC,UACC,GAAG,cACH,UAAU,2BACV,MAAOU,EAAM,0BAA0B,EACvC,MAAOL,EACP,SAAWU,GAAMP,EAAoB,OAAOO,EAAE,OAAO,KAAK,CAAC,EAE1D,SAAAN,GAAoB,IAAKO,GACxBhB,EAAC,UAAoB,MAAOgB,EACzB,SAAAA,GADUA,CAEb,CACD,EACH,GACF,EAGAf,EAAC,OACC,UAAU,gCACV,MAAOS,EAAM,+BAA+B,EAG5C,UAAAV,EAAC,UACC,SAAUG,IAAgB,EAC1B,QAAS,IAAMI,EAAaJ,EAAc,CAAC,EAC3C,UAAU,8BACV,MAAOO,EAAM,6BAA6B,EAE1C,SAAAV,EAACiB,EAAA,CAAgB,KAAMC,EAAW,cAAe,EACnD,EAGCP,EAAY,IAAI,CAACQ,EAAMC,IACtB,OAAOD,GAAS,SACdnB,EAAC,UAEC,UAAW,+BACTG,IAAgBgB,EAAO,aAAe,EACxC,GACA,MACEhB,IAAgBgB,EACZ,CACE,GAAGT,EAAM,6BAA6B,EACtC,GAAGA,EAAM,oCAAoC,CAC/C,EACAA,EAAM,6BAA6B,EAEzC,QAAS,IAAMH,EAAaY,CAAI,EAE/B,SAAAA,GAdIC,CAeP,EAEApB,EAAC,UAEC,SAAQ,GACR,UAAU,4DACV,MAAO,CACL,GAAGU,EAAM,6BAA6B,EACtC,OAAQ,UACR,QAAS,EACX,EAEC,SAAAS,GATIC,CAUP,CAEJ,EAGApB,EAAC,UACC,SAAUG,IAAgBC,EAC1B,QAAS,IAAMG,EAAaJ,EAAc,CAAC,EAC3C,UAAU,8BACV,MAAOO,EAAM,6BAA6B,EAE1C,SAAAV,EAACiB,EAAA,CAAgB,KAAMC,EAAW,eAAgB,EACpD,GACF,GACF,GACF,CAEJ,EAEOG,EAAQnB,GH7Kf,OAAS,mBAAAoB,MAAuB,iCIM5B,OAEE,OAAAC,GAFF,QAAAC,OAAA,oBAFJ,IAAMC,GAAkC,CAAC,CAAE,QAAAC,EAAS,SAAAC,CAAS,IAEzDH,GAAC,OAAI,UAAU,wBACZ,UAAAG,EACDJ,GAAC,QAAK,UAAU,mBAAoB,SAAAG,EAAQ,GAC9C,EAIGE,EAAQH,GJqHT,OA8DM,YAAAI,GA9DN,OAAAC,EAiCQ,QAAAC,MAjCR,oBAhGN,IAAMC,GAAwC,CAAC,CAC7C,QAAAC,EACA,KAAAC,EACA,MAAAC,EAAQ,YACR,mBAAAC,EAAqB,CAAC,EAAG,GAAI,EAAE,EAC/B,eAAAC,EAAiB,uBACjB,gBAAAC,EAAkB,CAAC,EACnB,WAAAC,EAAa,CAAC,EACd,WAAAC,EAAa,GACb,6BAAAC,EACA,UAAAC,EACA,kBAAAC,EACA,UAAAC,EACA,WAAAC,EACA,kBAAAC,CACF,IAAM,CAEJ,GAAM,CAACC,EAAaC,CAAc,EAAIC,EAAiB,CAAC,EAGlD,CAACC,EAAaC,CAAc,EAAIF,EAAgBf,CAAI,EAGpD,CAACkB,EAAYC,CAAa,EAAIJ,EAAwB,IAAI,EAC1D,CAACK,EAAWC,CAAY,EAAIN,EAAyB,KAAK,EAG1D,CAACO,EAAaC,CAAc,EAAIR,EAAiBb,EAAmB,CAAC,CAAC,EAGtE,CAACsB,EAAaC,CAAc,EAAIV,EAAwB,IAAI,EAM5DW,EAAgBC,GAAiB,CACrCb,EAAea,CAAI,EACnBpB,GACEA,EAA6BoB,EAAML,CAAW,CAClD,EAMMM,EAAuBC,GAAiB,CAC5CN,EAAeM,CAAI,EACnBf,EAAe,CAAC,EAChBP,GAAgCA,EAA6B,EAAGsB,CAAI,CACtE,EAMMC,EAAoBC,GAAgB,CACxC,IAAMC,EACJd,IAAea,GAAOX,IAAc,MAAQ,OAAS,MAIvD,GAHAD,EAAcY,CAAG,EACjBV,EAAaW,CAAY,EAErBvB,GAAqBC,EAAW,OAAOA,EAAUqB,EAAKC,CAAY,EAEtE,IAAMC,EAASlC,EAAQ,KAAMmC,GAAQA,EAAI,MAAQH,CAAG,EAC9CI,EAASF,GAAQ,OACnBA,EAAO,OAAO,CAAC,GAAGjC,CAAI,EAAGgC,CAAY,EACrC,CAAC,GAAGhC,CAAI,EAAE,KAAK,CAACoC,EAAGC,IACjB,CAAC,MAAMD,EAAEL,CAAG,CAAC,GAAK,CAAC,MAAMM,EAAEN,CAAG,CAAC,EAC3BC,IAAiB,MACfI,EAAEL,CAAG,EAAIM,EAAEN,CAAG,EACdM,EAAEN,CAAG,EAAIK,EAAEL,CAAG,EAChBC,IAAiB,MACjB,OAAOI,EAAEL,CAAG,CAAC,EAAE,cAAc,OAAOM,EAAEN,CAAG,CAAC,CAAC,EAC3C,OAAOM,EAAEN,CAAG,CAAC,EAAE,cAAc,OAAOK,EAAEL,CAAG,CAAC,CAAC,CACjD,EAEJd,EAAekB,CAAM,CACvB,EAGMG,EACF,KAAK,KADUhC,GACJE,GAAa,GAAKc,EACnBN,EAAY,OAASM,CADS,EAItCiB,EAAkBjC,EACpBU,EACAA,EAAY,OACTH,EAAc,GAAKS,EACpBT,EAAcS,CAChB,EAGEkB,EAA0C,CAC9C,uBACE5C,EAAC6C,EAAA,CACC,YAAa5B,EACb,WAAYyB,EACZ,YAAahB,EACb,UAAWhB,EAAaE,GAAa,EAAIQ,EAAY,OACrD,aAAcU,EACd,oBAAqBE,EACrB,mBAAoB1B,EACpB,MAAOE,EACT,EAEF,uBACER,EAAC8C,EAAA,CACC,YAAa7B,EACb,WAAYyB,EACZ,YAAahB,EACb,UAAWhB,EAAaE,GAAa,EAAIQ,EAAY,OACrD,aAAcU,EACd,oBAAqBE,EACrB,mBAAoB1B,EACpB,MAAOE,EACT,CAEJ,EAEA,OACEP,EAAC,OAEC,UAAAA,EAAC,SAAM,UAAWI,EAAO,MAAOI,EAAW,MACzC,UAAAT,EAAC,SACC,SAAAA,EAAC,MAAG,MAAOS,EAAW,UAAU,EAE7B,SAAAN,GAAS,IAAI,CAACkC,EAAQU,IACrB9C,EAAC,MAEC,MAAO,CACL,UAAW,OACX,OAAQoC,EAAO,SAAW,UAAY,UACtC,GAAG5B,EAAW,EAChB,EACA,QAAS,IAAM4B,EAAO,UAAYH,EAAiBG,EAAO,GAAG,EAE5D,UAAAA,EAAO,KACPA,EAAO,UACNrC,EAACgD,EAAA,CACC,KACE1B,IAAee,EAAO,IAClBb,IAAc,MACZyB,EAAW,SACXA,EAAW,WACbA,EAAW,OAEjB,MAAO,CAAE,WAAY,KAAM,EAC7B,IAnBGF,CAqBP,CACD,EACH,EACF,EACA/C,EAAC,SAAM,MAAOS,EAAW,MAEtB,SAAAkC,EAAgB,IAAI,CAACO,EAAKC,IACzBlD,EAAAF,GAAA,CACE,UAAAC,EAAC,MAEC,UAAW,WACT4B,IAAgBuB,EAAW,eAAiB,EAC9C,GACA,MAAO1C,EAAW,IAClB,QAAS,IAAM,CACbO,GACEa,EAAeD,IAAgBuB,EAAW,KAAOA,CAAQ,EAC3DpC,GAAcA,EAAWmC,CAAG,CAC9B,EAEC,SAAA/C,EAAQ,IAAI,CAACkC,EAAQe,IACpBnD,EAAC,MAAkB,MAAOQ,EAAW,GAElC,UAAAO,GAAqBoC,IAAa,GACjCpD,EAAC,QACC,UAAU,qBACV,MAAOS,EAAW,oBAAoB,EACtC,QAAU4C,GAAM,CACdA,EAAE,gBAAgB,EAClBxB,EACED,IAAgBuB,EAAW,KAAOA,CACpC,CACF,EAEA,SAAAnD,EAACgD,EAAA,CACC,KACEpB,IAAgBuB,EACZF,EAAW,cACXA,EAAW,eAEjB,UAAU,iBACV,MAAOxC,EAAW,gBAAgB,EACpC,EACF,EAGD4B,EAAO,QACNrC,EAACsD,EAAA,CACC,QACEjB,EAAO,qBACHA,EAAO,qBACPa,EAAIb,EAAO,GAAG,EAGnB,SAAAA,EAAO,OACJA,EAAO,OAAOa,CAAG,EACjBA,EAAIb,EAAO,GAAG,GAAK,GACzB,EACEA,EAAO,OACTA,EAAO,OAAOa,CAAG,EAEjBA,EAAIb,EAAO,GAAG,GAAK,KAxCde,CA0CT,CACD,GAvDIF,EAAI,IAAMC,CAwDjB,EAECvB,IAAgBuB,GAAYnC,GAC3BhB,EAAC,MACC,UAAU,mBACV,MAAOS,EAAW,kBAAkB,EAEpC,SAAAT,EAAC,MACC,QAASG,EAAQ,OACjB,UAAU,sBACV,MAAOM,EAAW,qBAAqB,EAGtC,SAAAO,EAAkBkC,CAAG,EACxB,EACF,GAEJ,CACD,EACH,GACF,EAGCN,EAAWrC,CAAyC,GACvD,CAEJ,EAEOgD,EAAQrD","names":["useState","FontAwesomeIcon","faFacebook","faSmile","faChevronLeft","faChevronRight","faAngleDoubleLeft","faAngleDoubleRight","faSort","faSortUp","faSortDown","faChevronDown","solidIcons","jsx","jsxs","RGXArrowPagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","e","option","FontAwesomeIcon","solidIcons","RGXArrowPagination_default","FontAwesomeIcon","jsx","jsxs","RGXTablePagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","pageNumbers","i","startPage","endPage","e","option","FontAwesomeIcon","solidIcons","page","index","RGXTablePagination_default","FontAwesomeIcon","jsx","jsxs","Tooltip","content","children","Tooltip_default","Fragment","jsx","jsxs","ReactGridX","columns","data","theme","rowsPerPageOptions","paginationType","paginationStyle","tableStyle","serverSide","onPaginationAndRowSizeChange","totalRows","serverSideSorting","onSorting","onRowClick","expandedComponent","currentPage","setCurrentPage","useState","currentData","setCurrentData","sortColumn","setSortColumn","sortOrder","setSortOrder","rowsPerPage","setRowsPerPage","expandedRow","setExpandedRow","onPageChange","page","onRowsPerPageChange","rows","onSortingHandler","key","newSortOrder","column","col","sorted","a","b","totalPages","currentPageData","pagination","RGXTablePagination_default","RGXArrowPagination_default","index","FontAwesomeIcon","solidIcons","row","rowIndex","colIndex","e","Tooltip_default","ReactGridX_default"]}