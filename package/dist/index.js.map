{"version":3,"sources":["../src/index.ts","../src/components/ReactGridX/index.tsx","../src/components/Paginations/RGXArrowPagination/index.tsx","../src/components/Icons/FontAwesome/index.tsx","../src/components/Paginations/RGXTablePagination/index.tsx"],"sourcesContent":["// components exports\nexport { default as ReactGridX } from \"./components/ReactGridX\";\nexport { default as RGXTablePagination } from \"./components/Paginations/RGXTablePagination\";\nexport { default as RGXArrowPagination } from \"./components/Paginations/RGXArrowPagination\";\n\n// interface props exports\nexport { default as RGXTablePaginationProps } from \"./components/Paginations/RGXTablePagination\";\nexport { default as RGXArrowPaginationProps } from \"./components/Paginations/RGXArrowPagination\";\nexport { default as ReactGridXColumnProps } from \"./components/ReactGridX\";\nexport { default as ReactGridXProps } from \"./components/ReactGridX\";\n","import React, { JSX, useState } from \"react\";\r\nimport \"../../themes/rgx-theme.css\";\r\nimport RGXArrowPagination from \"../Paginations/RGXArrowPagination\";\r\nimport RGXTablePagination from \"../Paginations/RGXTablePagination\";\r\n\r\n// Define the column properties for the table\r\nexport interface ReactGridXColumnProps {\r\n  name: string; // The column name to display\r\n  render?: (data: any) => JSX.Element | string; // Optional custom render function for cell data\r\n}\r\n\r\n// Define the main props for the ReactGridX component\r\nexport interface ReactGridXProps {\r\n  columns: ReactGridXColumnProps[]; // Array of column definitions\r\n  data: any[]; // The dataset to display in the table\r\n  theme?: string; // Optional CSS class for table styling\r\n  rowsPerPageOptions?: number[]; // Options for rows per page in pagination\r\n  paginationType?: \"rgx-table-pagination\" | \"rgx-arrow-pagination\"; // Type of pagination to use (e.g., custom or default)\r\n  paginationStyle?: Record<string, React.CSSProperties>; // Styles for pagination components\r\n  tableStyle?: Record<string, React.CSSProperties>; // Styles for table components\r\n  serverSide?: boolean; // Flag to indicate server-side pagination\r\n  onPaginationAndRowSizeChange?: (page: number, rowsPerPage: number) => void; // Callback for pagination and row size changes\r\n  totalRows?: number; // total number of rows in database\r\n}\r\n\r\n// ReactGridX: A flexible, reusable table component with optional server-side pagination\r\nconst ReactGridX: React.FC<ReactGridXProps> = ({\r\n  columns,\r\n  data,\r\n  theme = \"rgx-theme\",\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  paginationType = \"rgx-table-pagination\",\r\n  paginationStyle = {},\r\n  tableStyle = {},\r\n  serverSide = false,\r\n  onPaginationAndRowSizeChange,\r\n  totalRows,\r\n}) => {\r\n  // State to manage the current page\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  // State to manage the number of rows per page\r\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[0]);\r\n\r\n  /**\r\n   * Handle page change event\r\n   * @param page - The new page number\r\n   */\r\n  const onPageChange = (page: number) => {\r\n    setCurrentPage(page); // Update the current page state\r\n    onPaginationAndRowSizeChange &&\r\n      onPaginationAndRowSizeChange(page, rowsPerPage); // Trigger the callback with updated page and rows\r\n  };\r\n\r\n  /**\r\n   * Handle rows per page change event\r\n   * @param rows - The new number of rows per page\r\n   */\r\n  const onRowsPerPageChange = (rows: number) => {\r\n    setRowsPerPage(rows); // Update the rows per page state\r\n    setCurrentPage(1); // Reset to the first page\r\n    onPaginationAndRowSizeChange && onPaginationAndRowSizeChange(1, rows); // Trigger the callback with the new rows and reset page\r\n  };\r\n\r\n  // Calculate the total number of pages for client-side pagination and server-side pagination\r\n  const totalPages = serverSide\r\n    ? Math.ceil(totalRows ? totalRows : 0 / rowsPerPage) // total number of rows in database\r\n    : Math.ceil(data.length / rowsPerPage);\r\n\r\n  // Slice the data for the current page (only for client-side pagination)\r\n  const currentPageData = serverSide\r\n    ? data // Use full data for server-side; parent handles slicing\r\n    : data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);\r\n\r\n  // Define pagination components based on the pagination type\r\n  const pagination: Record<string, JSX.Element> = {\r\n    \"rgx-table-pagination\": (\r\n      <RGXTablePagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={data?.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n      />\r\n    ),\r\n    \"rgx-arrow-pagination\": (\r\n      <RGXArrowPagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={data?.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n      />\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the table */}\r\n      <table className={theme} style={tableStyle[\"table\"]}>\r\n        <thead>\r\n          <tr style={tableStyle[\"thead-tr\"]}>\r\n            {/* Render table headers based on column definitions */}\r\n            {columns?.map((column, index) => (\r\n              <th\r\n                key={index}\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  ...tableStyle[\"th\"],\r\n                }}\r\n              >\r\n                {column.name}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody style={tableStyle[\"tbody\"]}>\r\n          {/* Render table rows for the current page */}\r\n          {currentPageData.map((row, rowIndex) => (\r\n            <tr\r\n              key={row.id || rowIndex} // Use a unique key for each row\r\n              className=\"rgx-row\"\r\n              style={tableStyle[\"row\"]}\r\n            >\r\n              {columns.map((column, colIndex) => (\r\n                <td key={colIndex} style={tableStyle[\"td\"]}>\r\n                  {/* Render cell data using custom render function if provided */}\r\n                  {column.render\r\n                    ? column.render(row)\r\n                    : row[column.name.toLowerCase()]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* Render the pagination component */}\r\n      {pagination[paginationType as keyof typeof pagination]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactGridX;\r\n","import React from \"react\";\nimport \"../../../themes/rgx-arrow-pagination.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { solidIcons } from \"../../Icons/FontAwesome\";\n\n// Props interface for RGXArrowPagination component\nexport interface RGXArrowPaginationProps {\n  currentPage: number; // The current active page number\n  totalPages: number; // Total number of pages\n  rowsPerPage: number; // Number of rows displayed per page\n  totalRows: number; // Total number of rows in the dataset\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\n}\n\n// RGXArrowPagination: A reusable pagination component for tables\nconst RGXArrowPagination: React.FC<RGXArrowPaginationProps> = ({\n  currentPage,\n  totalPages,\n  rowsPerPage,\n  totalRows,\n  onPageChange,\n  onRowsPerPageChange,\n  rowsPerPageOptions = [5, 10, 15],\n  style = {},\n}) => {\n  return (\n    <div className=\"rgx-arrow-pagination\" style={style[\"rgx-arrow-pagination\"]}>\n      {/* Display pagination information */}\n      <div\n        className=\"rgx-arrow-pagination-info\"\n        style={style[\"rgx-arrow-pagination-info\"]}\n      >\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\n      </div>\n\n      {/* Rows per page selector and navigation controls */}\n      <div\n        className=\"rgx-arrow-pagination-row-per-page\"\n        style={style[\"rgx-arrow-pagination-row-per-page\"]}\n      >\n        {/* Rows per page dropdown */}\n        <div\n          className=\"rgx-arrow-rows-per-page\"\n          style={style[\"rgx-arrow-rows-per-page\"]}\n        >\n          <label\n            htmlFor=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-label\"\n            style={style[\"rgx-arrow-rows-per-page-label\"]}\n          >\n            Rows per page:\n          </label>\n          <select\n            id=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-select\"\n            style={style[\"rgx-arrow-rows-per-page-select\"]}\n            value={rowsPerPage}\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\n          >\n            {rowsPerPageOptions?.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Pagination controls */}\n        <div\n          className=\"rgx-arrow-pagination-controls\"\n          style={style[\"rgx-arrow-pagination-controls\"]}\n        >\n          {/* Previous First page button */}\n          <button\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleLeft} />\n          </button>\n          {/* Previous page button */}\n          <button\n            disabled={currentPage === 1}\n            onClick={() => onPageChange(currentPage - 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\n          </button>\n          {/* Display pagination information */}\n          <div\n            className=\"rgx-arrow-pagination-page-of\"\n            style={style[\"rgx-arrow-pagination-page-of\"]}\n          >\n            Page {currentPage} of {totalPages}\n          </div>\n          {/* Next page button */}\n          <button\n            disabled={currentPage === totalPages}\n            onClick={() => onPageChange(currentPage + 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\n          </button>\n\n          {/* Next Last page button */}\n          <button\n            disabled={currentPage === totalPages}\n            onClick={() => onPageChange(totalPages)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleRight} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RGXArrowPagination;\n","import { faFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSmile } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const solidIcons = {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n};\n\nexport const brandIcons = {\n  facebook: faFacebook,\n};\n\nexport const regularIcons = {\n  smile: faSmile,\n};\n","import React from \"react\";\r\nimport \"../../../themes/rgx-table-pagination.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solidIcons } from \"../../Icons/FontAwesome\";\r\n\r\n// Props interface for RGXTablePagination component\r\nexport interface RGXTablePaginationProps {\r\n  currentPage: number; // The current active page number\r\n  totalPages: number; // Total number of pages\r\n  rowsPerPage: number; // Number of rows displayed per page\r\n  totalRows: number; // Total number of rows in the dataset\r\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\r\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\r\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\r\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\r\n}\r\n\r\n// RGXTablePagination: A reusable pagination component for tables\r\nconst RGXTablePagination: React.FC<RGXTablePaginationProps> = ({\r\n  currentPage,\r\n  totalPages,\r\n  rowsPerPage,\r\n  totalRows,\r\n  onPageChange,\r\n  onRowsPerPageChange,\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  style = {},\r\n}) => {\r\n  /**\r\n   * Generates an array of page numbers with ellipsis for navigation\r\n   * @returns {Array<number | string>} - Array of page numbers and ellipsis\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers: (number | string)[] = [];\r\n    const maxVisiblePages = 4; // Maximum number of visible pages\r\n\r\n    if (totalPages <= maxVisiblePages) {\r\n      // If total pages are within the limit, show all page numbers\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n    } else {\r\n      // Add the first page and ellipsis if necessary\r\n      if (currentPage > 2) {\r\n        pageNumbers.push(1, \"...\");\r\n      } else {\r\n        pageNumbers.push(1);\r\n      }\r\n\r\n      // Calculate the range of visible pages\r\n      const startPage = Math.max(2, currentPage - 1);\r\n      const endPage = Math.min(totalPages - 1, currentPage + 1);\r\n\r\n      // Add the range of visible pages\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n\r\n      // Add ellipsis and the last page if necessary\r\n      if (currentPage < totalPages - 1) {\r\n        pageNumbers.push(\"...\", totalPages);\r\n      } else {\r\n        pageNumbers.push(totalPages);\r\n      }\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  const pageNumbers = getPageNumbers(); // Generate page numbers\r\n\r\n  return (\r\n    <div className=\"rgx-table-pagination\" style={style[\"rgx-table-pagination\"]}>\r\n      {/* Display pagination information */}\r\n      <div\r\n        className=\"rgx-table-pagination-info\"\r\n        style={style[\"rgx-table-pagination-info\"]}\r\n      >\r\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\r\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\r\n      </div>\r\n\r\n      {/* Rows per page selector and navigation controls */}\r\n      <div\r\n        className=\"rgx-table-pagination-row-per-page\"\r\n        style={style[\"rgx-table-pagination-row-per-page\"]}\r\n      >\r\n        {/* Rows per page dropdown */}\r\n        <div className=\"rgx-rows-per-page\" style={style[\"rgx-rows-per-page\"]}>\r\n          <label\r\n            htmlFor=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-label\"\r\n            style={style[\"rgx-rows-per-page-label\"]}\r\n          >\r\n            Rows per page:\r\n          </label>\r\n          <select\r\n            id=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-select\"\r\n            style={style[\"rgx-rows-per-page-select\"]}\r\n            value={rowsPerPage}\r\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\r\n          >\r\n            {rowsPerPageOptions?.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Pagination controls */}\r\n        <div\r\n          className=\"rgx-table-pagination-controls\"\r\n          style={style[\"rgx-table-pagination-controls\"]}\r\n        >\r\n          {/* Previous page button */}\r\n          <button\r\n            disabled={currentPage === 1}\r\n            onClick={() => onPageChange(currentPage - 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\r\n          </button>\r\n\r\n          {/* Page number buttons */}\r\n          {pageNumbers.map((page, index) =>\r\n            typeof page === \"number\" ? (\r\n              <button\r\n                key={index}\r\n                className={`rgx-table-pagination-button ${\r\n                  currentPage === page ? \"rgx-active\" : \"\"\r\n                }`}\r\n                style={\r\n                  currentPage === page\r\n                    ? {\r\n                        ...style[\"rgx-table-pagination-button\"],\r\n                        ...style[\"rgx-table-pagination-button-active\"],\r\n                      }\r\n                    : style[\"rgx-table-pagination-button\"]\r\n                }\r\n                onClick={() => onPageChange(page)}\r\n              >\r\n                {page}\r\n              </button>\r\n            ) : (\r\n              <button\r\n                key={index}\r\n                disabled\r\n                className=\"rgx-table-pagination-button rgx-table-pagination-ellipsis\"\r\n                style={{\r\n                  ...style[\"rgx-table-pagination-button\"],\r\n                  cursor: \"default\",\r\n                  opacity: 0.6,\r\n                }}\r\n              >\r\n                {page}\r\n              </button>\r\n            )\r\n          )}\r\n\r\n          {/* Next page button */}\r\n          <button\r\n            disabled={currentPage === totalPages}\r\n            onClick={() => onPageChange(currentPage + 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RGXTablePagination;\r\n"],"mappings":"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","names":["index_exports","__export","RGXArrowPagination_default","RGXTablePagination_default","ReactGridX_default","__toCommonJS","import_react","import_react_fontawesome","import_free_brands_svg_icons","import_free_regular_svg_icons","import_free_solid_svg_icons","solidIcons","import_jsx_runtime","RGXArrowPagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","e","option","solidIcons","RGXArrowPagination_default","import_react_fontawesome","import_jsx_runtime","RGXTablePagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","pageNumbers","i","startPage","endPage","e","option","solidIcons","page","index","RGXTablePagination_default","import_jsx_runtime","ReactGridX","columns","data","theme","rowsPerPageOptions","paginationType","paginationStyle","tableStyle","serverSide","onPaginationAndRowSizeChange","totalRows","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","onPageChange","page","onRowsPerPageChange","rows","totalPages","currentPageData","pagination","RGXTablePagination_default","RGXArrowPagination_default","column","index","row","rowIndex","colIndex","ReactGridX_default"]}