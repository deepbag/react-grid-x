{"version":3,"sources":["../src/index.ts","../src/components/ReactGridX/index.tsx","../src/components/Paginations/RGXArrowPagination/index.tsx","../src/components/Icons/FontAwesome/index.tsx","../src/components/Paginations/RGXTablePagination/index.tsx","../src/components/Tooltip/index.tsx","../src/components/Loader/index.tsx"],"sourcesContent":["// components exports\nexport { default as ReactGridX } from \"./components/ReactGridX\";\nexport { default as RGXTablePagination } from \"./components/Paginations/RGXTablePagination\";\nexport { default as RGXArrowPagination } from \"./components/Paginations/RGXArrowPagination\";\nexport { default as RGXTooltip } from \"./components/Tooltip\";\nexport { default as RGXLoader } from \"./components/Loader\";\n\n// interface props exports\nexport { default as RGXTablePaginationProps } from \"./components/Paginations/RGXTablePagination\";\nexport { default as RGXArrowPaginationProps } from \"./components/Paginations/RGXArrowPagination\";\nexport { default as ReactGridXColumnProps } from \"./components/ReactGridX\";\nexport { default as ReactGridXProps } from \"./components/ReactGridX\";\nexport { default as TooltipProps } from \"./components/Tooltip\";\nexport { default as LoaderProps } from \"./components/Loader\";\n","import React, { JSX, useState } from \"react\";\r\nimport \"../../themes/rgx-theme.css\";\r\nimport RGXArrowPagination from \"../Paginations/RGXArrowPagination\";\r\nimport RGXTablePagination from \"../Paginations/RGXTablePagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solidIcons } from \"../Icons/FontAwesome\";\r\nimport Tooltip from \"../Tooltip\";\r\nimport Loader from \"../Loader\";\r\n\r\n// Define the column properties for the table\r\nexport interface ReactGridXColumnProps {\r\n  name: string; // The column name to display\r\n  key: string; // key which match with data key\r\n  render?: (data: any) => JSX.Element | string; // Optional custom render function for cell data\r\n  sortable?: boolean; // Whether the column is sortable\r\n  onSort?: (data: any[], order: \"asc\" | \"desc\") => any[]; // Custom sorting function\r\n  tooltip?: boolean; // Tooltip property for columns\r\n  tooltipCustomContent?: (rowData: any) => string; //  Tooltip custom content\r\n}\r\n\r\n// Define the main props for the ReactGridX component\r\nexport interface ReactGridXProps {\r\n  columns: ReactGridXColumnProps[]; // Array of column definitions\r\n  data: any[]; // The dataset to display in the table\r\n  theme?: string; // Optional CSS class for table styling\r\n  rowsPerPageOptions?: number[]; // Options for rows per page in pagination\r\n  paginationType?: \"rgx-table-pagination\" | \"rgx-arrow-pagination\"; // Type of pagination to use (e.g., custom or default)\r\n  paginationStyle?: Record<string, React.CSSProperties>; // Styles for pagination components\r\n  tableStyle?: Record<string, React.CSSProperties>; // Styles for table components\r\n  serverSidePagination?: boolean; // Flag to indicate server-side pagination\r\n  onPaginationAndRowSizeChange?: (page: number, rowsPerPage: number) => void; // Callback for pagination and row size changes\r\n  totalRows?: number; // total number of rows in database\r\n  serverSideSorting?: boolean; // Whether sorting is handled on the server-side\r\n  onSorting?: (column: string, order: \"asc\" | \"desc\") => void; // Callback for sorting columns\r\n  onRowClick?: (rowData: any) => void; // Callback when a row is clicked\r\n  expandedComponent?: (row: any) => JSX.Element; // Custom component to render when a row is expanded, passed the row data\r\n  loading?: boolean; // Added loading prop\r\n  loaderComponent?: () => JSX.Element; // Added loader component prop\r\n}\r\n\r\n// ReactGridX: A flexible, reusable table component with optional server-side pagination\r\nconst ReactGridX: React.FC<ReactGridXProps> = ({\r\n  columns,\r\n  data,\r\n  theme = \"rgx-theme\",\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  paginationType = \"rgx-table-pagination\",\r\n  paginationStyle = {},\r\n  tableStyle = {},\r\n  serverSidePagination = false,\r\n  onPaginationAndRowSizeChange,\r\n  totalRows,\r\n  serverSideSorting = false,\r\n  onSorting,\r\n  onRowClick,\r\n  expandedComponent,\r\n  loading = false,\r\n  loaderComponent = () => <Loader />,\r\n}) => {\r\n  // State to manage the current page\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n  // data\r\n  const [currentData, setCurrentData] = useState<any[]>(data);\r\n\r\n  // State to track the currently sorted column and order\r\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\r\n\r\n  // State to manage the number of rows per page\r\n  const [rowsPerPage, setRowsPerPage] = useState<number>(rowsPerPageOptions[0]);\r\n\r\n  // State to track expanded row\r\n  const [expandedRow, setExpandedRow] = useState<number | null>(null);\r\n\r\n  /**\r\n   * Handle page change event\r\n   * @param page - The new page number\r\n   */\r\n  const onPageChange = (page: number) => {\r\n    setCurrentPage(page); // Update the current page state\r\n    onPaginationAndRowSizeChange &&\r\n      onPaginationAndRowSizeChange(page, rowsPerPage); // Trigger the callback with updated page and rows\r\n  };\r\n\r\n  /**\r\n   * Handle rows per page change event\r\n   * @param rows - The new number of rows per page\r\n   */\r\n  const onRowsPerPageChange = (rows: number) => {\r\n    setRowsPerPage(rows); // Update the rows per page state\r\n    setCurrentPage(1); // Reset to the first page\r\n    onPaginationAndRowSizeChange && onPaginationAndRowSizeChange(1, rows); // Trigger the callback with the new rows and reset page\r\n  };\r\n\r\n  /**\r\n   * Handle sorting event\r\n   * @param columnName - The column name to sort by\r\n   */\r\n  const onSortingHandler = (key: string) => {\r\n    const newSortOrder =\r\n      sortColumn === key && sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n    setSortColumn(key);\r\n    setSortOrder(newSortOrder);\r\n\r\n    if (serverSideSorting && onSorting) return onSorting(key, newSortOrder);\r\n\r\n    const column = columns.find((col) => col.key === key);\r\n    const sorted = column?.onSort\r\n      ? column.onSort([...data], newSortOrder)\r\n      : [...data].sort((a, b) =>\r\n          !isNaN(a[key]) && !isNaN(b[key])\r\n            ? newSortOrder === \"asc\"\r\n              ? a[key] - b[key]\r\n              : b[key] - a[key]\r\n            : newSortOrder === \"asc\"\r\n            ? String(a[key]).localeCompare(String(b[key]))\r\n            : String(b[key]).localeCompare(String(a[key]))\r\n        );\r\n\r\n    setCurrentData(sorted);\r\n  };\r\n\r\n  // Calculate the total number of pages for client-side pagination and server-side pagination\r\n  const totalPages = serverSidePagination\r\n    ? Math.ceil((totalRows ?? 0) / rowsPerPage) // total number of rows in database\r\n    : Math.ceil(currentData.length / rowsPerPage);\r\n\r\n  // Slice the data for the current page (only for client-side pagination)\r\n  const currentPageData = serverSidePagination\r\n    ? currentData // Use full data for server-side; parent handles slicing\r\n    : currentData.slice(\r\n        (currentPage - 1) * rowsPerPage,\r\n        currentPage * rowsPerPage\r\n      );\r\n\r\n  // Define pagination components based on the pagination type\r\n  const pagination: Record<string, JSX.Element> = {\r\n    \"rgx-table-pagination\": (\r\n      <RGXTablePagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={serverSidePagination ? totalRows ?? 0 : currentData.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n        loading={loading}\r\n      />\r\n    ),\r\n    \"rgx-arrow-pagination\": (\r\n      <RGXArrowPagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        rowsPerPage={rowsPerPage}\r\n        totalRows={serverSidePagination ? totalRows ?? 0 : currentData.length}\r\n        onPageChange={onPageChange} // Trigger page change callback\r\n        onRowsPerPageChange={onRowsPerPageChange} // Trigger rows per page change callback\r\n        rowsPerPageOptions={rowsPerPageOptions}\r\n        style={paginationStyle}\r\n        loading={loading}\r\n      />\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={loading ? \"rgx-table-container\" : \"\"}>\r\n        {/* Conditionally render the loader */}\r\n        {loading && loaderComponent && loaderComponent()}\r\n        {/* Render the table */}\r\n        <table className={theme} style={tableStyle[\"table\"]}>\r\n          <thead>\r\n            <tr style={tableStyle[\"thead-tr\"]}>\r\n              {/* Render table headers based on column definitions */}\r\n              {columns?.map((column, index) => (\r\n                <th\r\n                  key={index}\r\n                  style={{\r\n                    textAlign: \"left\",\r\n                    cursor: column.sortable ? \"pointer\" : \"default\",\r\n                    ...tableStyle[\"th\"],\r\n                  }}\r\n                  onClick={() =>\r\n                    column.sortable && onSortingHandler(column.key)\r\n                  }\r\n                >\r\n                  {column.name}\r\n                  {column.sortable && (\r\n                    <FontAwesomeIcon\r\n                      icon={\r\n                        sortColumn === column.key\r\n                          ? sortOrder === \"asc\"\r\n                            ? solidIcons.faSortUp\r\n                            : solidIcons.faSortDown\r\n                          : solidIcons.faSort\r\n                      }\r\n                      style={{ marginLeft: \"8px\" }}\r\n                    />\r\n                  )}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody\r\n            style={tableStyle[\"tbody\"]}\r\n            className={`${loading ? \"rgx-tobody-loading\" : \"\"}`}\r\n          >\r\n            {/* Render table rows for the current page */}\r\n            {currentPageData.map((row, rowIndex) => (\r\n              <>\r\n                <tr\r\n                  key={row.id || rowIndex} // Use a unique key for each row\r\n                  className={`rgx-row ${\r\n                    expandedRow === rowIndex ? \"rgx-expanded\" : \"\"\r\n                  }`}\r\n                  style={tableStyle[\"row\"]}\r\n                  onClick={() => {\r\n                    expandedComponent &&\r\n                      setExpandedRow(\r\n                        expandedRow === rowIndex ? null : rowIndex\r\n                      );\r\n                    onRowClick && onRowClick(row);\r\n                  }}\r\n                >\r\n                  {columns.map((column, colIndex) => (\r\n                    <td key={colIndex} style={tableStyle[\"td\"]}>\r\n                      {/* Conditional rendering for the arrow icon if expandedComponent is passed */}\r\n                      {expandedComponent && colIndex === 0 && (\r\n                        <span\r\n                          className=\"rgx-expanded-arrow\"\r\n                          style={tableStyle[\"rgx-expanded-arrow\"]}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            setExpandedRow(\r\n                              expandedRow === rowIndex ? null : rowIndex\r\n                            );\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon\r\n                            icon={\r\n                              expandedRow === rowIndex\r\n                                ? solidIcons.faChevronDown\r\n                                : solidIcons.faChevronRight\r\n                            }\r\n                            className=\"rgx-arrow-icon\"\r\n                            style={tableStyle[\"rgx-arrow-icon\"]}\r\n                          />\r\n                        </span>\r\n                      )}\r\n                      {/* Render cell data using custom render function if provided */}\r\n                      {column.tooltip ? (\r\n                        <Tooltip\r\n                          content={\r\n                            column.tooltipCustomContent\r\n                              ? column.tooltipCustomContent(row)\r\n                              : row[column.key]\r\n                          }\r\n                        >\r\n                          {column.render\r\n                            ? column.render(row)\r\n                            : row[column.key] ?? \"\"}\r\n                        </Tooltip>\r\n                      ) : column.render ? (\r\n                        column.render(row)\r\n                      ) : (\r\n                        row[column.key] ?? \"\"\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n                {/* Render expanded row content */}\r\n                {expandedRow === rowIndex && expandedComponent && (\r\n                  <tr\r\n                    className=\"rgx-expanded-row\"\r\n                    style={tableStyle[\"rgx-expanded-row\"]}\r\n                  >\r\n                    <td\r\n                      colSpan={columns.length}\r\n                      className=\"rgx-expanded-row-td\"\r\n                      style={tableStyle[\"rgx-expanded-row-td\"]}\r\n                    >\r\n                      {/* Call the expanded component and pass the row data */}\r\n                      {expandedComponent(row)}\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* Render the pagination component */}\r\n      {pagination[paginationType as keyof typeof pagination]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactGridX;\r\n","import React from \"react\";\nimport \"../../../themes/rgx-arrow-pagination.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { solidIcons } from \"../../Icons/FontAwesome\";\n\n// Props interface for RGXArrowPagination component\nexport interface RGXArrowPaginationProps {\n  currentPage: number; // The current active page number\n  totalPages: number; // Total number of pages\n  rowsPerPage: number; // Number of rows displayed per page\n  totalRows: number; // Total number of rows in the dataset\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\n  loading: boolean; // Added loading prop\n}\n\n// RGXArrowPagination: A reusable pagination component for tables\nconst RGXArrowPagination: React.FC<RGXArrowPaginationProps> = ({\n  currentPage,\n  totalPages,\n  rowsPerPage,\n  totalRows,\n  onPageChange,\n  onRowsPerPageChange,\n  rowsPerPageOptions = [5, 10, 15],\n  style = {},\n  loading = false,\n}) => {\n  return (\n    <div className=\"rgx-arrow-pagination\" style={style[\"rgx-arrow-pagination\"]}>\n      {/* Display pagination information */}\n      <div\n        className=\"rgx-arrow-pagination-info\"\n        style={style[\"rgx-arrow-pagination-info\"]}\n      >\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\n      </div>\n\n      {/* Rows per page selector and navigation controls */}\n      <div\n        className=\"rgx-arrow-pagination-row-per-page\"\n        style={style[\"rgx-arrow-pagination-row-per-page\"]}\n      >\n        {/* Rows per page dropdown */}\n        <div\n          className=\"rgx-arrow-rows-per-page\"\n          style={style[\"rgx-arrow-rows-per-page\"]}\n        >\n          <label\n            htmlFor=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-label\"\n            style={style[\"rgx-arrow-rows-per-page-label\"]}\n          >\n            Rows per page:\n          </label>\n          <select\n            id=\"rowsPerPage\"\n            className=\"rgx-arrow-rows-per-page-select\"\n            style={style[\"rgx-arrow-rows-per-page-select\"]}\n            value={rowsPerPage}\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\n            disabled={loading}\n          >\n            {rowsPerPageOptions?.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Pagination controls */}\n        <div\n          className=\"rgx-arrow-pagination-controls\"\n          style={style[\"rgx-arrow-pagination-controls\"]}\n        >\n          {/* Previous First page button */}\n          <button\n            disabled={currentPage === 1 || loading}\n            onClick={() => onPageChange(1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleLeft} />\n          </button>\n          {/* Previous page button */}\n          <button\n            disabled={currentPage === 1 || loading}\n            onClick={() => onPageChange(currentPage - 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\n          </button>\n          {/* Display pagination information */}\n          <div\n            className=\"rgx-arrow-pagination-page-of\"\n            style={style[\"rgx-arrow-pagination-page-of\"]}\n          >\n            Page {currentPage} of {totalPages}\n          </div>\n          {/* Next page button */}\n          <button\n            disabled={currentPage === totalPages || loading}\n            onClick={() => onPageChange(currentPage + 1)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\n          </button>\n\n          {/* Next Last page button */}\n          <button\n            disabled={currentPage === totalPages || loading}\n            onClick={() => onPageChange(totalPages)}\n            className=\"rgx-arrow-pagination-button\"\n            style={style[\"rgx-arrow-pagination-button\"]}\n          >\n            <FontAwesomeIcon icon={solidIcons.faAngleDoubleRight} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RGXArrowPagination;\n","import { faFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSmile } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faChevronDown\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const solidIcons = {\n  faChevronLeft,\n  faChevronRight,\n  faAngleDoubleLeft,\n  faAngleDoubleRight,\n  faSort,\n  faSortUp,\n  faSortDown,\n  faChevronDown\n};\n\nexport const brandIcons = {\n  facebook: faFacebook,\n};\n\nexport const regularIcons = {\n  smile: faSmile,\n};\n","import React from \"react\";\r\nimport \"../../../themes/rgx-table-pagination.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solidIcons } from \"../../Icons/FontAwesome\";\r\n\r\n// Props interface for RGXTablePagination component\r\nexport interface RGXTablePaginationProps {\r\n  currentPage: number; // The current active page number\r\n  totalPages: number; // Total number of pages\r\n  rowsPerPage: number; // Number of rows displayed per page\r\n  totalRows: number; // Total number of rows in the dataset\r\n  onPageChange: (page: number) => void; // Callback function triggered when the page changes\r\n  onRowsPerPageChange: (rows: number) => void; // Callback function triggered when rows per page changes\r\n  rowsPerPageOptions?: number[]; // Options for rows per page dropdown\r\n  style?: Record<string, React.CSSProperties>; // Optional styles for pagination elements\r\n  loading: boolean; // Added loading prop\r\n}\r\n\r\n// RGXTablePagination: A reusable pagination component for tables\r\nconst RGXTablePagination: React.FC<RGXTablePaginationProps> = ({\r\n  currentPage,\r\n  totalPages,\r\n  rowsPerPage,\r\n  totalRows,\r\n  onPageChange,\r\n  onRowsPerPageChange,\r\n  rowsPerPageOptions = [5, 10, 15],\r\n  style = {},\r\n  loading = false,\r\n}) => {\r\n  /**\r\n   * Generates an array of page numbers with ellipsis for navigation\r\n   * @returns {Array<number | string>} - Array of page numbers and ellipsis\r\n   */\r\n  const getPageNumbers = () => {\r\n    const pageNumbers: (number | string)[] = [];\r\n    const maxVisiblePages = 4; // Maximum number of visible pages\r\n\r\n    if (totalPages <= maxVisiblePages) {\r\n      // If total pages are within the limit, show all page numbers\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n    } else {\r\n      // Add the first page and ellipsis if necessary\r\n      if (currentPage > 2) {\r\n        pageNumbers.push(1, \"...\");\r\n      } else {\r\n        pageNumbers.push(1);\r\n      }\r\n\r\n      // Calculate the range of visible pages\r\n      const startPage = Math.max(2, currentPage - 1);\r\n      const endPage = Math.min(totalPages - 1, currentPage + 1);\r\n\r\n      // Add the range of visible pages\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n\r\n      // Add ellipsis and the last page if necessary\r\n      if (currentPage < totalPages - 1) {\r\n        pageNumbers.push(\"...\", totalPages);\r\n      } else {\r\n        pageNumbers.push(totalPages);\r\n      }\r\n    }\r\n\r\n    return pageNumbers;\r\n  };\r\n\r\n  const pageNumbers = getPageNumbers(); // Generate page numbers\r\n\r\n  return (\r\n    <div className=\"rgx-table-pagination\" style={style[\"rgx-table-pagination\"]}>\r\n      {/* Display pagination information */}\r\n      <div\r\n        className=\"rgx-table-pagination-info\"\r\n        style={style[\"rgx-table-pagination-info\"]}\r\n      >\r\n        Showing {(currentPage - 1) * rowsPerPage + 1} to{\" \"}\r\n        {Math.min(currentPage * rowsPerPage, totalRows)} of {totalRows}\r\n      </div>\r\n\r\n      {/* Rows per page selector and navigation controls */}\r\n      <div\r\n        className=\"rgx-table-pagination-row-per-page\"\r\n        style={style[\"rgx-table-pagination-row-per-page\"]}\r\n      >\r\n        {/* Rows per page dropdown */}\r\n        <div className=\"rgx-rows-per-page\" style={style[\"rgx-rows-per-page\"]}>\r\n          <label\r\n            htmlFor=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-label\"\r\n            style={style[\"rgx-rows-per-page-label\"]}\r\n          >\r\n            Rows per page:\r\n          </label>\r\n          <select\r\n            id=\"rowsPerPage\"\r\n            className=\"rgx-rows-per-page-select\"\r\n            style={style[\"rgx-rows-per-page-select\"]}\r\n            value={rowsPerPage}\r\n            onChange={(e) => onRowsPerPageChange(Number(e.target.value))}\r\n            disabled={loading}\r\n          >\r\n            {rowsPerPageOptions?.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Pagination controls */}\r\n        <div\r\n          className=\"rgx-table-pagination-controls\"\r\n          style={style[\"rgx-table-pagination-controls\"]}\r\n        >\r\n          {/* Previous page button */}\r\n          <button\r\n            disabled={currentPage === 1 || loading}\r\n            onClick={() => onPageChange(currentPage - 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronLeft} />\r\n          </button>\r\n\r\n          {/* Page number buttons */}\r\n          {pageNumbers.map((page, index) =>\r\n            typeof page === \"number\" ? (\r\n              <button\r\n                key={index}\r\n                className={`rgx-table-pagination-button ${\r\n                  currentPage === page ? \"rgx-active\" : \"\"\r\n                }`}\r\n                style={\r\n                  currentPage === page\r\n                    ? {\r\n                        ...style[\"rgx-table-pagination-button\"],\r\n                        ...style[\"rgx-table-pagination-button-active\"],\r\n                      }\r\n                    : style[\"rgx-table-pagination-button\"]\r\n                }\r\n                onClick={() => onPageChange(page)}\r\n                disabled={loading}\r\n              >\r\n                {page}\r\n              </button>\r\n            ) : (\r\n              <button\r\n                key={index}\r\n                disabled\r\n                className=\"rgx-table-pagination-button rgx-table-pagination-ellipsis\"\r\n                style={{\r\n                  ...style[\"rgx-table-pagination-button\"],\r\n                  cursor: \"default\",\r\n                  opacity: 0.6,\r\n                }}\r\n              >\r\n                {page}\r\n              </button>\r\n            )\r\n          )}\r\n\r\n          {/* Next page button */}\r\n          <button\r\n            disabled={currentPage === totalPages || loading}\r\n            onClick={() => onPageChange(currentPage + 1)}\r\n            className=\"rgx-table-pagination-button\"\r\n            style={style[\"rgx-table-pagination-button\"]}\r\n          >\r\n            <FontAwesomeIcon icon={solidIcons.faChevronRight} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RGXTablePagination;\r\n","import React, { JSX } from \"react\";\nimport \"../../themes/rgx-tooltip.css\"\n\nexport interface TooltipProps {\n  content: string | JSX.Element; // The content of the tooltip\n  children: React.ReactNode; // The element that will trigger the tooltip\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({ content, children }) => {\n  return (\n    <div className=\"rgx-tooltip-container\">\n      {children}\n      <span className=\"rgx-tooltip-text\">{content}</span>\n    </div>\n  );\n};\n\nexport default Tooltip;\n","import React from \"react\";\nimport \"../../themes/rgx-loader.css\";\n\nexport interface LoaderProps {\n  message?: string; // Optional custom message\n}\n\nconst Loader: React.FC<LoaderProps> = ({\n  message = \"Loading, please wait...\",\n}) => (\n  <div className=\"rgx-loader-container\">\n    <div className=\"rgx-spinner\"></div>\n    <div className=\"rgx-loader-message\">{message}</div>\n  </div>\n);\n\nexport default Loader;\n"],"mappings":"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","names":["index_exports","__export","Loader_default","RGXArrowPagination_default","RGXTablePagination_default","Tooltip_default","ReactGridX_default","__toCommonJS","import_react","import_react_fontawesome","import_free_brands_svg_icons","import_free_regular_svg_icons","import_free_solid_svg_icons","solidIcons","import_jsx_runtime","RGXArrowPagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","loading","e","option","solidIcons","RGXArrowPagination_default","import_react_fontawesome","import_jsx_runtime","RGXTablePagination","currentPage","totalPages","rowsPerPage","totalRows","onPageChange","onRowsPerPageChange","rowsPerPageOptions","style","loading","pageNumbers","i","startPage","endPage","e","option","solidIcons","page","index","RGXTablePagination_default","import_react_fontawesome","import_jsx_runtime","Tooltip","content","children","Tooltip_default","import_jsx_runtime","Loader","message","Loader_default","import_jsx_runtime","ReactGridX","columns","data","theme","rowsPerPageOptions","paginationType","paginationStyle","tableStyle","serverSidePagination","onPaginationAndRowSizeChange","totalRows","serverSideSorting","onSorting","onRowClick","expandedComponent","loading","loaderComponent","Loader_default","currentPage","setCurrentPage","currentData","setCurrentData","sortColumn","setSortColumn","sortOrder","setSortOrder","rowsPerPage","setRowsPerPage","expandedRow","setExpandedRow","onPageChange","page","onRowsPerPageChange","rows","onSortingHandler","key","newSortOrder","column","col","sorted","a","b","totalPages","currentPageData","pagination","RGXTablePagination_default","RGXArrowPagination_default","index","solidIcons","row","rowIndex","colIndex","e","Tooltip_default","ReactGridX_default"]}